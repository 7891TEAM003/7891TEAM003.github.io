<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-10-29T00:03:10+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ben</title><entry><title type="html">0x0002 - Structure of a program</title><link href="http://localhost:4000/2024/10/28/0x0002-Structure-of-a-program.html" rel="alternate" type="text/html" title="0x0002 - Structure of a program" /><published>2024-10-28T23:07:20+08:00</published><updated>2024-10-28T23:07:20+08:00</updated><id>http://localhost:4000/2024/10/28/0x0002%20-%20Structure%20of%20a%20program</id><content type="html" xml:base="http://localhost:4000/2024/10/28/0x0002-Structure-of-a-program.html"><![CDATA[<h1 id="structure-of-a-program">Structure of a program</h1>
<p>page: <a href="https://cplusplus.com/doc/tutorial/program_structure/">https://cplusplus.com/doc/tutorial/program_structure/</a> <br />
r2: <a href="https://github.com/radareorg/radare2">https://github.com/radareorg/radare2</a></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// my first program in C++</span>
<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>第一行：</strong><code class="language-plaintext highlighter-rouge">// my first program in C++</code> <br />
“双斜杠” 这是注释内容，增加代码的可以读性。对程序没有任何影响。</p>

<p><strong>第二行：</strong><code class="language-plaintext highlighter-rouge">#include &lt;iostream&gt;</code> <br />
由 <code class="language-plaintext highlighter-rouge">#</code> 开头表示这一个预处理器解释和读取的指令。<br />
<code class="language-plaintext highlighter-rouge">include &lt;iostream&gt;</code> 表示包含了一个 <code class="language-plaintext highlighter-rouge">iostream</code> 库文件。<br />
如果你想知道 g++ 在编译的时候使用哪些库，可以使用 <code class="language-plaintext highlighter-rouge">echo | g++ -E -v -</code> 命令。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  2-BasicsOfC++ <span class="nb">echo</span> | g++ <span class="nt">-x</span> c++ <span class="nt">-E</span> <span class="nt">-v</span> -
Using built-in specs.
<span class="nv">COLLECT_GCC</span><span class="o">=</span>g++
Target: x86_64-pc-linux-gnu
Configured with: /build/gcc/src/gcc/configure <span class="nt">--enable-languages</span><span class="o">=</span>ada,c,c++,d,fortran,go,lto,m2,objc,obj-c++,rust <span class="nt">--enable-bootstrap</span> <span class="nt">--prefix</span><span class="o">=</span>/usr <span class="nt">--libdir</span><span class="o">=</span>/usr/lib <span class="nt">--libexecdir</span><span class="o">=</span>/usr/lib <span class="nt">--mandir</span><span class="o">=</span>/usr/share/man <span class="nt">--infodir</span><span class="o">=</span>/usr/share/info <span class="nt">--with-bugurl</span><span class="o">=</span>https://gitlab.archlinux.org/archlinux/packaging/packages/gcc/-/issues <span class="nt">--with-build-config</span><span class="o">=</span>bootstrap-lto <span class="nt">--with-linker-hash-style</span><span class="o">=</span>gnu <span class="nt">--with-system-zlib</span> <span class="nt">--enable-__cxa_atexit</span> <span class="nt">--enable-cet</span><span class="o">=</span>auto <span class="nt">--enable-checking</span><span class="o">=</span>release <span class="nt">--enable-clocale</span><span class="o">=</span>gnu <span class="nt">--enable-default-pie</span> <span class="nt">--enable-default-ssp</span> <span class="nt">--enable-gnu-indirect-function</span> <span class="nt">--enable-gnu-unique-object</span> <span class="nt">--enable-libstdcxx-backtrace</span> <span class="nt">--enable-link-serialization</span><span class="o">=</span>1 <span class="nt">--enable-linker-build-id</span> <span class="nt">--enable-lto</span> <span class="nt">--enable-multilib</span> <span class="nt">--enable-plugin</span> <span class="nt">--enable-shared</span> <span class="nt">--enable-threads</span><span class="o">=</span>posix <span class="nt">--disable-libssp</span> <span class="nt">--disable-libstdcxx-pch</span> <span class="nt">--disable-werror</span>
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 14.2.1 20240910 <span class="o">(</span>GCC<span class="o">)</span> 
<span class="nv">COLLECT_GCC_OPTIONS</span><span class="o">=</span><span class="s1">'-E'</span> <span class="s1">'-v'</span> <span class="s1">'-shared-libgcc'</span> <span class="s1">'-mtune=generic'</span> <span class="s1">'-march=x86-64'</span>
 /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/cc1plus <span class="nt">-E</span> <span class="nt">-quiet</span> <span class="nt">-v</span> <span class="nt">-D_GNU_SOURCE</span> - <span class="nt">-mtune</span><span class="o">=</span>generic <span class="nt">-march</span><span class="o">=</span>x86-64 <span class="nt">-dumpbase</span> -
ignoring nonexistent directory <span class="s2">"/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/../../../../x86_64-pc-linux-gnu/include"</span>
<span class="c">#include "..." search starts here:</span>
<span class="c">#include &lt;...&gt; search starts here:</span>
 /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/../../../../include/c++/14.2.1
 /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/../../../../include/c++/14.2.1/x86_64-pc-linux-gnu
 /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/../../../../include/c++/14.2.1/backward
 /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include
 /usr/local/include
 /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include-fixed
 /usr/include
End of search list.
<span class="c"># 0 "&lt;stdin&gt;"</span>
<span class="c"># 0 "&lt;built-in&gt;"</span>
<span class="c"># 0 "&lt;command-line&gt;"</span>
<span class="c"># 1 "/usr/include/stdc-predef.h" 1 3 4</span>
<span class="c"># 0 "&lt;command-line&gt;" 2</span>
<span class="c"># 1 "&lt;stdin&gt;"</span>
<span class="nv">COMPILER_PATH</span><span class="o">=</span>/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/:/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/:/usr/lib/gcc/x86_64-pc-linux-gnu/:/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/:/usr/lib/gcc/x86_64-pc-linux-gnu/
<span class="nv">LIBRARY_PATH</span><span class="o">=</span>/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/:/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/../../../../lib/:/lib/../lib/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/../../../:/lib/:/usr/lib/
<span class="nv">COLLECT_GCC_OPTIONS</span><span class="o">=</span><span class="s1">'-E'</span> <span class="s1">'-v'</span> <span class="s1">'-shared-libgcc'</span> <span class="s1">'-mtune=generic'</span> <span class="s1">'-march=x86-64
</span></code></pre></div></div>

<p>是这些目录。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#include "..." search starts here:</span>
<span class="c">#include &lt;...&gt; search starts here:</span>
 /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/../../../../include/c++/14.2.1
 /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/../../../../include/c++/14.2.1/x86_64-pc-linux-gnu
 /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/../../../../include/c++/14.2.1/backward
 /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include
 /usr/local/include
 /usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/include-fixed
 /usr/include
End of search list.
</code></pre></div></div>

<p><strong>第三行：</strong>空行<br />
对编译器没有任何印象，只是增加可以阅读性<br />
你甚至可以把代码写成这样，但是没有任何可以阅读性。<br /></p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// my first program in C++</span>
<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="c1"> </span><span class="cp">
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span><span class="p">;}</span>
</code></pre></div></div>

<p><strong>第四行：</strong><code class="language-plaintext highlighter-rouge">int main()</code><br />
这是个程序默认的开始位置，但是程序不会直接从 <code class="language-plaintext highlighter-rouge">main()</code> 开始运行，会先执行一些其他的东西。这个以后在讲。</p>

<p><strong>第五行和七行：</strong><code class="language-plaintext highlighter-rouge">{}</code><br />
<code class="language-plaintext highlighter-rouge">main()</code> 的代码应该在这两个括号里面。</p>

<p><strong>第六行：</strong><code class="language-plaintext highlighter-rouge">std::cout &lt;&lt; "Hello World!";</code></p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">std::cout</code>输出方法，std 代表 <strong>st</strong>andar<strong>d</strong> <strong>c</strong>haracter <strong>out</strong>put device。</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;&lt;</code> 这是插入运算符。</li>
  <li><code class="language-plaintext highlighter-rouge">"Hello World!"</code> 被插入到 <code class="language-plaintext highlighter-rouge">std::cout</code>。</li>
  <li><code class="language-plaintext highlighter-rouge">;</code> 代表着一行代码到此结束。对程序没有任何影响，只是将代码分成不同的行，增加阅读性。</li>
</ol>

<h2 id="comments">Comments</h2>
<p>C++ 中两种不同的注释<br />
<code class="language-plaintext highlighter-rouge">// 单行注释</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/*
 多行注释
*/
</code></pre></div></div>

<h2 id="using-namespace-std">Using namespace std</h2>
<p>在下面这个代码，你能看到 cout 前失去了 <code class="language-plaintext highlighter-rouge">std::</code>。
这是应为在第三行有 <code class="language-plaintext highlighter-rouge">using namespace std;</code> 将 <code class="language-plaintext highlighter-rouge">std</code> 命名空间引入了当前作用域。也就是说在这个 cpp 文件中你不需要在使用 <code class="language-plaintext highlighter-rouge">std::</code> 来限定了，这可以简化代码。但是最好还是不要使用，因为可以和别的头文件冲突，复杂就是简单。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// my first program in C++
#include &lt;iostream&gt;
using namespace std;

int main()
{
	cout &lt;&lt; "Hello World!";
}
</code></pre></div></div>

<h2 id="走进-main-方法">走进 main 方法</h2>
<p><code class="language-plaintext highlighter-rouge">$ g main</code> 编译 main.cpp 文件，在编译好后，会生成一个 main EFL文件。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  1-StructureOfAProgram g main.cpp 
Compilation successful. Executable: main
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">$ r2 main</code> 逆向这个 main EFL文件。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  1-StructureOfAProgram r2 main
WARN: Relocs has not been applied. Please use <span class="sb">`</span><span class="nt">-e</span> bin.relocs.apply<span class="o">=</span><span class="nb">true</span><span class="sb">`</span> or <span class="sb">`</span><span class="nt">-e</span> bin.cache<span class="o">=</span><span class="nb">true</span><span class="sb">`</span> next <span class="nb">time</span>
<span class="o">[</span>0x00001040]&gt; aaa
INFO: Analyze all flags starting with sym. and entry0 <span class="o">(</span>aa<span class="o">)</span>
INFO: Analyze imports <span class="o">(</span>af@@@i<span class="o">)</span>
INFO: Analyze entrypoint <span class="o">(</span>af@ entry0<span class="o">)</span>
INFO: Analyze symbols <span class="o">(</span>af@@@s<span class="o">)</span>
INFO: Recovering variables
INFO: Analyze all functions arguments/locals <span class="o">(</span>afva@@@F<span class="o">)</span>
INFO: Analyze <span class="k">function </span>calls <span class="o">(</span>aac<span class="o">)</span>
INFO: Analyze len bytes of instructions <span class="k">for </span>references <span class="o">(</span>aar<span class="o">)</span>
INFO: Finding and parsing C++ vtables <span class="o">(</span>avrr<span class="o">)</span>
INFO: Analyzing methods
INFO: Recovering <span class="nb">local </span>variables <span class="o">(</span>afva<span class="o">)</span>
INFO: Type matching analysis <span class="k">for </span>all functions <span class="o">(</span>aaft<span class="o">)</span>
INFO: Propagate noreturn information <span class="o">(</span>aanr<span class="o">)</span>
INFO: Use <span class="nt">-AA</span> or aaaa to perform additional experimental analysis
<span class="o">[</span>0x00001040]&gt; 
</code></pre></div></div>

<p>分析 main EFL 文件。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>0x00001040]&gt; aaa
INFO: Analyze all flags starting with sym. and entry0 <span class="o">(</span>aa<span class="o">)</span>
INFO: Analyze imports <span class="o">(</span>af@@@i<span class="o">)</span>
INFO: Analyze entrypoint <span class="o">(</span>af@ entry0<span class="o">)</span>
INFO: Analyze symbols <span class="o">(</span>af@@@s<span class="o">)</span>
INFO: Recovering variables
INFO: Analyze all functions arguments/locals <span class="o">(</span>afva@@@F<span class="o">)</span>
INFO: Analyze <span class="k">function </span>calls <span class="o">(</span>aac<span class="o">)</span>
INFO: Analyze len bytes of instructions <span class="k">for </span>references <span class="o">(</span>aar<span class="o">)</span>
INFO: Finding and parsing C++ vtables <span class="o">(</span>avrr<span class="o">)</span>
INFO: Analyzing methods
INFO: Recovering <span class="nb">local </span>variables <span class="o">(</span>afva<span class="o">)</span>
INFO: Type matching analysis <span class="k">for </span>all functions <span class="o">(</span>aaft<span class="o">)</span>
INFO: Propagate noreturn information <span class="o">(</span>aanr<span class="o">)</span>
INFO: Use <span class="nt">-AA</span> or aaaa to perform additional experimental analysis
<span class="o">[</span>0x00001040]&gt;
</code></pre></div></div>

<p>你可以使用 <code class="language-plaintext highlighter-rouge">$ r2 -A main</code> 等于 <code class="language-plaintext highlighter-rouge">$ r2 main</code> 后在 <code class="language-plaintext highlighter-rouge">aaa</code>。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  1-StructureOfAProgram r2 <span class="nt">-A</span> main
WARN: Relocs has not been applied. Please use <span class="sb">`</span><span class="nt">-e</span> bin.relocs.apply<span class="o">=</span><span class="nb">true</span><span class="sb">`</span> or <span class="sb">`</span><span class="nt">-e</span> bin.cache<span class="o">=</span><span class="nb">true</span><span class="sb">`</span> next <span class="nb">time
</span>INFO: Analyze all flags starting with sym. and entry0 <span class="o">(</span>aa<span class="o">)</span>
INFO: Analyze imports <span class="o">(</span>af@@@i<span class="o">)</span>
INFO: Analyze entrypoint <span class="o">(</span>af@ entry0<span class="o">)</span>
INFO: Analyze symbols <span class="o">(</span>af@@@s<span class="o">)</span>
INFO: Recovering variables
INFO: Analyze all functions arguments/locals <span class="o">(</span>afva@@@F<span class="o">)</span>
INFO: Analyze <span class="k">function </span>calls <span class="o">(</span>aac<span class="o">)</span>
INFO: Analyze len bytes of instructions <span class="k">for </span>references <span class="o">(</span>aar<span class="o">)</span>
INFO: Finding and parsing C++ vtables <span class="o">(</span>avrr<span class="o">)</span>
INFO: Analyzing methods
INFO: Recovering <span class="nb">local </span>variables <span class="o">(</span>afva<span class="o">)</span>
INFO: Type matching analysis <span class="k">for </span>all functions <span class="o">(</span>aaft<span class="o">)</span>
INFO: Propagate noreturn information <span class="o">(</span>aanr<span class="o">)</span>
INFO: Use <span class="nt">-AA</span> or aaaa to perform additional experimental analysis
<span class="o">[</span>0x00001040]&gt; 
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">s main</code> 表示切换到 main 的位置，你可以看到 0x00001040 变成了 0x00001139。<br />
 <code class="language-plaintext highlighter-rouge">pdf</code> 应该是 <code class="language-plaintext highlighter-rouge">print the disassemble function</code>，打印反汇编方法。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>0x00001040]&gt; s main
<span class="o">[</span>0x00001139]&gt; pdf
            <span class="p">;</span> DATA XREF from entry0 @ 0x1058<span class="o">(</span>r<span class="o">)</span>
┌ 36: int main <span class="o">(</span>int argc, char <span class="k">**</span>argv, char <span class="k">**</span>envp<span class="o">)</span><span class="p">;</span>
│           0x00001139      55             push rbp
│           0x0000113a      4889e5         mov rbp, rsp
│           0x0000113d      488d05c10e..   lea rax, str.Hello_World_   <span class="p">;</span> 0x2005 <span class="p">;</span> <span class="s2">"Hello World!"</span>
│           0x00001144      4889c6         mov rsi, rax
│           0x00001147      488d05f22e..   lea rax, obj.std::cout      <span class="p">;</span> loc.__bss_start
│                                                                      <span class="p">;</span> 0x4040
│           0x0000114e      4889c7         mov rdi, rax
│           0x00001151      e8dafeffff     call method std::basic_ostream&lt;char, std::char_traits&lt;char&gt; <span class="o">&gt;</span>&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; <span class="o">&gt;(</span>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; <span class="o">&gt;</span>&amp;, char const<span class="k">*</span><span class="o">)</span> <span class="p">;</span> method.std::basic_ostream_char__std::char_traits_char____std::operator____std.char_traits_char____std::basic_ostream_char__std::char_traits_char_____char_const_
│           0x00001156      b800000000     mov eax, 0
│           0x0000115b      5d             pop rbp
└           0x0000115c      c3             ret
<span class="o">[</span>0x00001139]&gt;
</code></pre></div></div>

<p>我们应该关注这些东西
<img src="/pictures/Pastedimage20241028224350.png" alt="" /></p>

<p>到这里就不在深入了。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Structure of a program page: https://cplusplus.com/doc/tutorial/program_structure/ r2: https://github.com/radareorg/radare2]]></summary></entry><entry><title type="html">0x0001 - Compilers</title><link href="http://localhost:4000/2024/10/27/0x0001-Compilers.html" rel="alternate" type="text/html" title="0x0001 - Compilers" /><published>2024-10-27T20:28:31+08:00</published><updated>2024-10-27T20:28:31+08:00</updated><id>http://localhost:4000/2024/10/27/0x0001%20-%20Compilers</id><content type="html" xml:base="http://localhost:4000/2024/10/27/0x0001-Compilers.html"><![CDATA[<p>page: <a href="https://cplusplus.com/doc/tutorial/introduction/">https://cplusplus.com/doc/tutorial/introduction/</a></p>

<p><strong>C++11</strong>是 C++ 的第二个主要版本，2011年9月出版。</p>

<h2 id="什么是编译器what-is-a-compiler">什么是编译器？（What is a compiler?）</h2>
<p>编译器可以把你写的 cpp 代码经过一系列的加工变成<strong>计算机认识的语言</strong>，这是一个复杂的编译过程。</p>

<h2 id="控制台程序console-programs">控制台程序（Console programs）</h2>
<p>控制台程序是用文本和用户通信的程序，可以获取用户的输入也可以输出文本到屏幕。</p>

<h3 id="集成开发环境ide">集成开发环境（IDE）</h3>
<p>本人使用 sublime text 开发。 当然你可以使用其他软件 nvim、emacs、nano、clion、…。</p>]]></content><author><name></name></author><summary type="html"><![CDATA[page: https://cplusplus.com/doc/tutorial/introduction/]]></summary></entry><entry><title type="html">0x0000 - 介绍 &amp;amp; 实验环境</title><link href="http://localhost:4000/2024/10/27/0x0000-%E4%BB%8B%E7%BB%8D-&-%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83.html" rel="alternate" type="text/html" title="0x0000 - 介绍 &amp;amp; 实验环境" /><published>2024-10-27T13:02:26+08:00</published><updated>2024-10-27T13:02:26+08:00</updated><id>http://localhost:4000/2024/10/27/0x0000%20-%20%E4%BB%8B%E7%BB%8D%20&amp;%20%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83</id><content type="html" xml:base="http://localhost:4000/2024/10/27/0x0000-%E4%BB%8B%E7%BB%8D-&amp;-%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83.html"><![CDATA[<p>在 2024/10/26 我想在发些学习 x64 逆向的记录，可以的话也请大家监督我的学习并且帮忙查错。
至少一个星期发一篇。</p>

<p>主要包括几个阶段</p>
<ol>
  <li>以 <a href="https://cplusplus.com/doc/tutorial/">https://cplusplus.com/doc/tutorial/</a> 教学内容为例子，我也不知道什么时候能学完。</li>
  <li>实战逆向 <a href="https://crackmes.one/">https://crackmes.one/</a> 如果时间充足的话，我应该把这些都给逆向</li>
</ol>

<h2 id="环境">环境：</h2>
<hr />
<h3 id="os">OS</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  ~ <span class="nb">uname</span> <span class="nt">-a</span>
Linux code 6.10.13-3-MANJARO <span class="c">#1 SMP PREEMPT_DYNAMIC Tue Oct  8 03:24:49 UTC 2024 x86_64 GNU/Linux</span>
</code></pre></div></div>
<h3 id="g">g++</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  ~ c++ <span class="nt">-v</span>
Using built-in specs.
<span class="nv">COLLECT_GCC</span><span class="o">=</span>c++
<span class="nv">COLLECT_LTO_WRAPPER</span><span class="o">=</span>/usr/lib/gcc/x86_64-pc-linux-gnu/14.2.1/lto-wrapper
Target: x86_64-pc-linux-gnu
Configured with: /build/gcc/src/gcc/configure <span class="nt">--enable-languages</span><span class="o">=</span>ada,c,c++,d,fortran,go,lto,m2,objc,obj-c++,rust <span class="nt">--enable-bootstrap</span> <span class="nt">--prefix</span><span class="o">=</span>/usr <span class="nt">--libdir</span><span class="o">=</span>/usr/lib <span class="nt">--libexecdir</span><span class="o">=</span>/usr/lib <span class="nt">--mandir</span><span class="o">=</span>/usr/share/man <span class="nt">--infodir</span><span class="o">=</span>/usr/share/info <span class="nt">--with-bugurl</span><span class="o">=</span>https://gitlab.archlinux.org/archlinux/packaging/packages/gcc/-/issues <span class="nt">--with-build-config</span><span class="o">=</span>bootstrap-lto <span class="nt">--with-linker-hash-style</span><span class="o">=</span>gnu <span class="nt">--with-system-zlib</span> <span class="nt">--enable-__cxa_atexit</span> <span class="nt">--enable-cet</span><span class="o">=</span>auto <span class="nt">--enable-checking</span><span class="o">=</span>release <span class="nt">--enable-clocale</span><span class="o">=</span>gnu <span class="nt">--enable-default-pie</span> <span class="nt">--enable-default-ssp</span> <span class="nt">--enable-gnu-indirect-function</span> <span class="nt">--enable-gnu-unique-object</span> <span class="nt">--enable-libstdcxx-backtrace</span> <span class="nt">--enable-link-serialization</span><span class="o">=</span>1 <span class="nt">--enable-linker-build-id</span> <span class="nt">--enable-lto</span> <span class="nt">--enable-multilib</span> <span class="nt">--enable-plugin</span> <span class="nt">--enable-shared</span> <span class="nt">--enable-threads</span><span class="o">=</span>posix <span class="nt">--disable-libssp</span> <span class="nt">--disable-libstdcxx-pch</span> <span class="nt">--disable-werror</span>
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 14.2.1 20240910 <span class="o">(</span>GCC<span class="o">)</span>
</code></pre></div></div>
<h3 id="r2">r2</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  ~ r2 <span class="nt">-v</span>
radare2 5.9.2 0 @ linux-x86-64
birth: git.5.9.2 2024-08-01__08:35:56
options: gpl release <span class="nt">-O1</span> cs:5 cl:2 meson
</code></pre></div></div>

<h2 id="快速编译">快速编译</h2>
<hr />
<p>在编译 cpp 文件时非常需要输入一堆命令非常麻烦，我使用通义千问的 AI 生成了这样一个脚本，并且做了一些小改动。</p>

<h3 id="1-查看那些目录是环境变量目录前面的目录优先权最大">1. 查看那些目录是环境变量目录，前面的目录优先权最大。</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  ~ <span class="nb">echo</span> <span class="nv">$PATH</span> 
/home/frank/.local/bin /usr/local/bin /usr/bin /bin /usr/local/sbin /usr/lib/jvm/default/bin /usr/bin/site_perl /usr/bin/vendor_perl /usr/bin/core_perl /usr/lib/rustup/bin
</code></pre></div></div>

<h3 id="2-这是一个-bash-脚本可以快速编译-cpp-文件">2. 这是一个 bash 脚本，可以快速编译 cpp 文件。</h3>
<p>把这个文件放到环境变量目录就可以全局执行了。</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat</span> /home/frank/.local/bin/g
<span class="c">#!/bin/bash</span>

<span class="nv">fullpath</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>

<span class="c"># 检查是否有参数传入</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$fullpath</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"Usage: </span><span class="nv">$0</span><span class="s2"> &lt;filename&gt;"</span>
  <span class="nb">exit </span>1
<span class="k">fi</span>

<span class="c"># 检查文件是否存在</span>
<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$fullpath</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"File not found: </span><span class="nv">$fullpath</span><span class="s2">"</span>
  <span class="nb">exit </span>1
<span class="k">fi</span>

<span class="c"># 提取文件名（包括扩展名）</span>
<span class="nv">fullfilename</span><span class="o">=</span><span class="si">$(</span><span class="nb">basename</span> <span class="nt">--</span> <span class="s2">"</span><span class="nv">$fullpath</span><span class="s2">"</span><span class="si">)</span>

<span class="c"># 提取文件名（去掉扩展名）</span>
<span class="nv">filename</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">fullfilename</span><span class="p">%.*</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># 提取文件扩展名</span>
<span class="nv">extension</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">fullfilename</span><span class="p">##*.</span><span class="k">}</span><span class="s2">"</span> 

<span class="c"># 检查是否是 C++ 文件</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$extension</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"cpp"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"Unsupported file type: </span><span class="nv">$extension</span><span class="s2"> (only .cpp is supported)"</span>
  <span class="nb">exit </span>1
<span class="k">fi</span>

<span class="c"># 编译命令</span>
g++ <span class="nt">-Wall</span> <span class="nt">-std</span><span class="o">=</span>c++11 <span class="nt">-o</span> <span class="s2">"</span><span class="nv">$filename</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$fullpath</span><span class="s2">"</span>

<span class="c"># 检查编译是否成功</span>
<span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="nt">-eq</span> 0 <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"Compilation successful. Executable: </span><span class="nv">$filename</span><span class="s2">"</span>
<span class="k">else
  </span><span class="nb">echo</span> <span class="s2">"Compilation failed."</span>
<span class="k">fi</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[在 2024/10/26 我想在发些学习 x64 逆向的记录，可以的话也请大家监督我的学习并且帮忙查错。 至少一个星期发一篇。]]></summary></entry></feed>